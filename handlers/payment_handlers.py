from aiogram import Router, F
from aiogram.types import Message, PreCheckoutQuery, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from services.payment_service import create_invoice, process_successful_payment

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    Telegram —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ pre_checkout_query
    """
    await pre_checkout_query.answer(ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    """
    payment = message.successful_payment
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    await message.answer(
        f"‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n"
        f"–°—É–º–º–∞: {payment.total_amount / 100} Stars\n"
        f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment.telegram_payment_charge_id[:10]}...\n\n"
        f"–ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –≤–∞—à–µ–≥–æ –≥–∞–¥–∞–Ω–∏—è...",
        parse_mode="Markdown"
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    await process_successful_payment(
        message, 
        payment.total_amount, 
        payment.invoice_payload,
        payment.telegram_payment_charge_id
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∞–¥–∞–Ω–∏–µ
    from handlers.tarot_handlers import show_tarot_animation, generate_tarot_reading
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π —Ä–∞—Å–∫–ª–∞–¥–∞
    await show_tarot_animation(message)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∞–¥–∞–Ω–∏–µ
    reading = generate_tarot_reading()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–∞–¥–∞–Ω–∏—è
    await message.answer('üîÆ *–í–∞—à–µ –≥–∞–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!* üç∏\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!', parse_mode="Markdown")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
    for card in reading['cards']:
        await message.answer(
            f"üÉè *{card['name']}*\n\n"
            f"{card['description']}\n\n"
            f"üç∏ *–ê–ª–∫–æ–≥–æ–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:*\n{card['drunk_interpretation']}",
            parse_mode="Markdown"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    await message.answer(
        f"üîÆ *–û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n\n{reading['summary']}\n\n"
        f"üç∏ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫:*\n"
        f"{reading['recommended_drink']}",
        parse_mode="Markdown"
    )